{"version":3,"file":"datepicker.component.d.ts","sources":["datepicker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, Provider } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { DatePickerInnerComponent } from './datepicker-inner.component';\r\nimport { DatepickerConfig } from './datepicker.config';\r\nexport declare const DATEPICKER_CONTROL_VALUE_ACCESSOR: Provider;\r\nexport declare class DatePickerComponent implements ControlValueAccessor {\r\n    /** sets datepicker mode, supports: `day`, `month`, `year` */\r\n    datepickerMode: string;\r\n    /** default date to show if `ng-model` value is not specified */\r\n    initDate: Date;\r\n    /**  oldest selectable date */\r\n    minDate: Date;\r\n    /** latest selectable date */\r\n    maxDate: Date;\r\n    /** set lower datepicker mode, supports: `day`, `month`, `year` */\r\n    minMode: string;\r\n    /** sets upper datepicker mode, supports: `day`, `month`, `year` */\r\n    maxMode: string;\r\n    /** if false week numbers will be hidden */\r\n    showWeeks: boolean;\r\n    /** format of day in month */\r\n    formatDay: string;\r\n    /** format of month in year */\r\n    formatMonth: string;\r\n    /** format of year in year range */\r\n    formatYear: string;\r\n    /** format of day in week header */\r\n    formatDayHeader: string;\r\n    /** format of title when selecting day */\r\n    formatDayTitle: string;\r\n    /** format of title when selecting month */\r\n    formatMonthTitle: string;\r\n    /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */\r\n    startingDay: number;\r\n    /** number of years displayed in year selection */\r\n    yearRange: number;\r\n    /** if true only dates from the currently displayed month will be shown */\r\n    onlyCurrentMonth: boolean;\r\n    /** if true shortcut`s event propagation will be disabled */\r\n    shortcutPropagation: boolean;\r\n    /** number of months displayed in a single row of month picker */\r\n    monthColLimit: number;\r\n    /** number of years displayed in a single row of year picker */\r\n    yearColLimit: number;\r\n    /** array of custom css classes to be applied to targeted dates */\r\n    customClass: {\r\n        date: Date;\r\n        mode: string;\r\n        clazz: string;\r\n    }[];\r\n    /** array of disabled dates */\r\n    dateDisabled: {\r\n        date: Date;\r\n        mode: string;\r\n    }[];\r\n    /** disabled days of the week from 0-6 (0=Sunday, ..., 6=Saturday) */\r\n    dayDisabled: number[];\r\n    /** currently active date */\r\n    get activeDate(): Date;\r\n    set activeDate(value: Date);\r\n    selectionDone: EventEmitter<Date>;\r\n    /** callback to invoke when the activeDate is changed. */\r\n    activeDateChange: EventEmitter<Date>;\r\n    _datePicker: DatePickerInnerComponent;\r\n    onChange: any;\r\n    onTouched: any;\r\n    config: DatepickerConfig;\r\n    protected _now: Date;\r\n    protected _activeDate: Date;\r\n    constructor(config: DatepickerConfig);\r\n    configureOptions(): void;\r\n    onUpdate(event: Date): void;\r\n    onSelectionDone(event: Date): void;\r\n    onActiveDateChange(event: Date): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: () => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n}\r\n"]}